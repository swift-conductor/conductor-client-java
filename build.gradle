buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:10.0.0'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.+'
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java'
    id 'application'
    id 'jacoco'

    id 'org.sonarqube' version '3.4.0.2513'

    id 'com.netflix.nebula.contacts' version '7.0.1'
    id 'com.netflix.nebula.netflixoss' version '11.3.2'
}

// Establish version and status
ext.githubProjectName = rootProject.name // Change if github project name is not the same as the root project's name

subprojects {
    tasks.withType(Javadoc).all { enabled = false }
}

apply from: "$rootDir/dependencies.gradle"

allprojects {
    apply plugin: 'com.netflix.nebula.netflixoss'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'project-report'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    group = 'com.swiftconductor.conductor'

    configurations.all {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        resolutionStrategy {
            force 'org.codehaus.jettison:jettison:1.5.4'
            force "org.apache.commons:commons-compress:${revCommonsCompress}"
        }
    }

    repositories {
        mavenCentral()
        maven {
            // repository for -SNAPSHOT.* verions:
            url "https://s01.oss.sonatype.org/content/repositories/snapshots"
        }
    }

    dependencies {
        implementation('org.apache.logging.log4j:log4j-core') {
            version {
                // this is the preferred version this library will use
                prefer '2.17.2'
                // the strict bounds, effectively allowing any 2.x version greater than 2.17.2
                // could also remove the upper bound entirely if we wanted too
                strictly '[2.17.2,3.0)'
            }
        }
        implementation('org.apache.logging.log4j:log4j-api') {
            version {
                // this is the preferred version this library will use
                prefer '2.17.2'
                // the strict bounds, effectively allowing any 2.x version greater than 2.17.2
                // could also remove the upper bound entirely if we wanted too
                strictly '[2.17.2,3.0)'
            }
        }
        implementation('org.apache.logging.log4j:log4j-slf4j-impl') {
            version {
                // this is the preferred version this library will use
                prefer '2.17.2'
                // the strict bounds, effectively allowing any 2.x version greater than 2.17.2
                // could also remove the upper bound entirely if we wanted too
                strictly '[2.17.2,3.0)'
            }
        }
        implementation('org.apache.logging.log4j:log4j-jul') {
            version {
                // this is the preferred version this library will use
                prefer '2.17.2'
                // the strict bounds, effectively allowing any 2.x version greater than 2.17.2
                // could also remove the upper bound entirely if we wanted too
                strictly '[2.17.2,3.0)'
            }
        }
        implementation('org.apache.logging.log4j:log4j-web') {
            version {
                // this is the preferred version this library will use
                prefer '2.17.2'
                // the strict bounds, effectively allowing any 2.x version greater than 2.17.2
                // could also remove the upper bound entirely if we wanted too
                strictly '[2.17.2,3.0)'
            }
        }


        testImplementation "junit:junit:4.13.2"
        testImplementation "org.junit.vintage:junit-vintage-engine:5.8.2"
        testImplementation 'org.mockito:mockito-core:5.8.0'

        testImplementation "org.codehaus.groovy:groovy-all:${revGroovy}"
        testImplementation "org.mock-server:mockserver-client-java:${revMockServerClient}"

        // Needed for build to work on m1/m2 macs
        testImplementation 'net.java.dev.jna:jna:5.13.0'
    }

    // processes additional configuration metadata json file as described here
    // https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/appendix-configuration-metadata.html#configuration-metadata-additional-metadata
    compileJava.inputs.files(processResources)

    test {
        useJUnitPlatform()
        testLogging {
            events = ["SKIPPED", "FAILED"]
            exceptionFormat = "full"
            displayGranularity = 1
            showStandardStreams = false
        }
    }

}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "swift-conductor_conductor"
        property "sonar.organization", "swift-conductor"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

configure(allprojects) {
    apply plugin: 'com.diffplug.spotless'

    spotless {
        java {
            googleJavaFormat().aosp()
            removeUnusedImports()
            importOrder('java', 'javax', 'org', 'com.swiftconductor', '', '\\#com.swiftconductor', '\\#')
            licenseHeaderFile("$rootDir/licenseheader.txt")
        }
    }
}

configure(allprojects) {
    // see: 
    // https://plugins.gradle.org/plugin/com.netflix.nebula.contacts
    // https://github.com/nebula-plugins/gradle-contacts-plugin
    apply plugin: 'com.netflix.nebula.contacts'

    contacts {
        'hello@swiftsoftwaregroup.com' {
            github 'swift-conductor'
            moniker 'Swift Software Group'
        }
    }
}